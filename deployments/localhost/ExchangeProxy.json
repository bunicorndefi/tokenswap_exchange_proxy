{
  "address": "0x3E1bdF37123ecD148ebA55597b5FDd8Af48E5b01",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "constant": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "swapAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "limitReturnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExchangeProxy.Swap[]",
          "name": "swaps",
          "type": "tuple[]"
        },
        {
          "internalType": "contract TokenInterface",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "contract TokenInterface",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTotalAmountOut",
          "type": "uint256"
        }
      ],
      "name": "batchSwapExactIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmountOut",
          "type": "uint256"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "swapAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "limitReturnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExchangeProxy.Swap[]",
          "name": "swaps",
          "type": "tuple[]"
        },
        {
          "internalType": "contract TokenInterface",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "contract TokenInterface",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalAmountIn",
          "type": "uint256"
        }
      ],
      "name": "batchSwapExactOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmountIn",
          "type": "uint256"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "swapAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "limitReturnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExchangeProxy.Swap[][]",
          "name": "swapSequences",
          "type": "tuple[][]"
        },
        {
          "internalType": "contract TokenInterface",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "contract TokenInterface",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTotalAmountOut",
          "type": "uint256"
        }
      ],
      "name": "multihopBatchSwapExactIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmountOut",
          "type": "uint256"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "swapAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "limitReturnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExchangeProxy.Swap[][]",
          "name": "swapSequences",
          "type": "tuple[][]"
        },
        {
          "internalType": "contract TokenInterface",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "contract TokenInterface",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalAmountIn",
          "type": "uint256"
        }
      ],
      "name": "multihopBatchSwapExactOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmountIn",
          "type": "uint256"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "name": "setRegistry",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract TokenInterface",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "contract TokenInterface",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTotalAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nPools",
          "type": "uint256"
        }
      ],
      "name": "smartSwapExactIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmountOut",
          "type": "uint256"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract TokenInterface",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "contract TokenInterface",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nPools",
          "type": "uint256"
        }
      ],
      "name": "smartSwapExactOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmountIn",
          "type": "uint256"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "swapAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nPools",
          "type": "uint256"
        }
      ],
      "name": "viewSplitExactIn",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "swapAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "limitReturnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExchangeProxy.Swap[]",
          "name": "swaps",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "totalOutput",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "swapAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nPools",
          "type": "uint256"
        }
      ],
      "name": "viewSplitExactOut",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "swapAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "limitReturnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExchangeProxy.Swap[]",
          "name": "swaps",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "totalOutput",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x250a4411eb1de0879016964423362e429df53c68a2f3ce550cb66de34394a27f",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "3058653",
    "logsBloom": "0x
    "blockHash": "0x4d3850142bf5bb184dd7537bf89faa33ddb254f1c8cf73a5a6791b521918a1bb",
    "transactionHash": "0x250a4411eb1de0879016964423362e429df53c68a2f3ce550cb66de34394a27f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5,
        "transactionHash": "0x250a4411eb1de0879016964423362e429df53c68a2f3ce550cb66de34394a27f",
        "address": "0x3E1bdF37123ecD148ebA55597b5FDd8Af48E5b01",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x4d3850142bf5bb184dd7537bf89faa33ddb254f1c8cf73a5a6791b521918a1bb"
      }
    ],
    "blockNumber": 5,
    "cumulativeGasUsed": "3058653",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x68285dDD1Db7394CEC83D11F4eA7Df2dB0c434Ce"
  ],
  "solcInputHash": "2ed6ce514ad36043fe731db1477f880a",
  "metadata": "{\"compiler\":{\"version\":\"0.5.12+commit.7709ece9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeProxy.Swap[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTotalAmountOut\",\"type\":\"uint256\"}],\"name\":\"batchSwapExactIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountOut\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeProxy.Swap[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalAmountIn\",\"type\":\"uint256\"}],\"name\":\"batchSwapExactOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeProxy.Swap[][]\",\"name\":\"swapSequences\",\"type\":\"tuple[][]\"},{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTotalAmountOut\",\"type\":\"uint256\"}],\"name\":\"multihopBatchSwapExactIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountOut\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeProxy.Swap[][]\",\"name\":\"swapSequences\",\"type\":\"tuple[][]\"},{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalAmountIn\",\"type\":\"uint256\"}],\"name\":\"multihopBatchSwapExactOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTotalAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nPools\",\"type\":\"uint256\"}],\"name\":\"smartSwapExactIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountOut\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nPools\",\"type\":\"uint256\"}],\"name\":\"smartSwapExactOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nPools\",\"type\":\"uint256\"}],\"name\":\"viewSplitExactIn\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeProxy.Swap[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"totalOutput\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nPools\",\"type\":\"uint256\"}],\"name\":\"viewSplitExactOut\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeProxy.Swap[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"totalOutput\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/ExchangeProxy.sol\":\"ExchangeProxy\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90a3995645af7562d84b9d69363ffa5ae7217714ab61e951bf7bc450f40e4061\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"},\"@openzeppelin/contracts/ownership/Ownable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x6fb9d7889769d7cc161225f9ef7a90e468ba9788b253816f8d8b6894d3472c24\"},\"contracts/ExchangeProxy.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.5.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/ownership/Ownable.sol\\\";\\n\\ninterface PoolInterface {\\n    function swapExactAmountIn(address, uint, address, uint, uint) external returns (uint, uint);\\n    function swapExactAmountOut(address, uint, address, uint, uint) external returns (uint, uint);\\n    function calcInGivenOut(uint, uint, uint, uint, uint, uint) external pure returns (uint);\\n    function calcOutGivenIn(uint, uint, uint, uint, uint, uint) external pure returns (uint);\\n    function getDenormalizedWeight(address) external view returns (uint);\\n    function getBalance(address) external view returns (uint);\\n    function getSwapFee() external view returns (uint);\\n}\\n\\ninterface TokenInterface {\\n    function balanceOf(address) external view returns (uint);\\n    function allowance(address, address) external view returns (uint);\\n    function approve(address, uint) external returns (bool);\\n    function transfer(address, uint) external returns (bool);\\n    function transferFrom(address, address, uint) external returns (bool);\\n    function deposit() external payable;\\n    function withdraw(uint) external;\\n}\\n\\ninterface RegistryInterface {\\n    function getBestPoolsWithLimit(address, address, uint) external view returns (address[] memory);\\n}\\n\\ncontract ExchangeProxy is Ownable {\\n\\n    using SafeMath for uint256;\\n\\n    struct Pool {\\n        address pool;\\n        uint    tokenBalanceIn;\\n        uint    tokenWeightIn;\\n        uint    tokenBalanceOut;\\n        uint    tokenWeightOut;\\n        uint    swapFee;\\n        uint    effectiveLiquidity;\\n    }\\n\\n    struct Swap {\\n        address pool;\\n        address tokenIn;\\n        address tokenOut;\\n        uint    swapAmount; // tokenInAmount / tokenOutAmount\\n        uint    limitReturnAmount; // minAmountOut / maxAmountIn\\n        uint    maxPrice;\\n    }\\n\\n    TokenInterface weth;\\n    RegistryInterface registry;\\n    address private constant ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n    uint private constant BONE = 10**18;\\n\\n    constructor(address _weth) public {\\n        weth = TokenInterface(_weth);\\n    }\\n\\n    function setRegistry(address _registry) external onlyOwner {\\n        registry = RegistryInterface(_registry);\\n    }\\n\\n    function batchSwapExactIn(\\n        Swap[] memory swaps,\\n        TokenInterface tokenIn,\\n        TokenInterface tokenOut,\\n        uint totalAmountIn,\\n        uint minTotalAmountOut\\n    )\\n        public payable\\n        returns (uint totalAmountOut)\\n    {\\n        transferFromAll(tokenIn, totalAmountIn);\\n\\n        for (uint i = 0; i < swaps.length; i++) {\\n            Swap memory swap = swaps[i];\\n            TokenInterface SwapTokenIn = TokenInterface(swap.tokenIn);\\n            PoolInterface pool = PoolInterface(swap.pool);\\n\\n            if (SwapTokenIn.allowance(address(this), swap.pool) > 0) {\\n                SwapTokenIn.approve(swap.pool, 0);\\n            }\\n            SwapTokenIn.approve(swap.pool, swap.swapAmount);\\n\\n            (uint tokenAmountOut,) = pool.swapExactAmountIn(\\n                                        swap.tokenIn,\\n                                        swap.swapAmount,\\n                                        swap.tokenOut,\\n                                        swap.limitReturnAmount,\\n                                        swap.maxPrice\\n                                    );\\n            totalAmountOut = tokenAmountOut.add(totalAmountOut);\\n        }\\n\\n        require(totalAmountOut >= minTotalAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n\\n        transferAll(tokenOut, totalAmountOut);\\n        transferAll(tokenIn, getBalance(tokenIn));\\n    }\\n\\n    function batchSwapExactOut(\\n        Swap[] memory swaps,\\n        TokenInterface tokenIn,\\n        TokenInterface tokenOut,\\n        uint maxTotalAmountIn\\n    )\\n        public payable\\n        returns (uint totalAmountIn)\\n    {\\n        transferFromAll(tokenIn, maxTotalAmountIn);\\n\\n        for (uint i = 0; i < swaps.length; i++) {\\n            Swap memory swap = swaps[i];\\n            TokenInterface SwapTokenIn = TokenInterface(swap.tokenIn);\\n            PoolInterface pool = PoolInterface(swap.pool);\\n\\n            if (SwapTokenIn.allowance(address(this), swap.pool) > 0) {\\n                SwapTokenIn.approve(swap.pool, 0);\\n            }\\n            SwapTokenIn.approve(swap.pool, swap.limitReturnAmount);\\n\\n            (uint tokenAmountIn,) = pool.swapExactAmountOut(\\n                                        swap.tokenIn,\\n                                        swap.limitReturnAmount,\\n                                        swap.tokenOut,\\n                                        swap.swapAmount,\\n                                        swap.maxPrice\\n                                    );\\n            totalAmountIn = tokenAmountIn.add(totalAmountIn);\\n        }\\n        require(totalAmountIn <= maxTotalAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        transferAll(tokenOut, getBalance(tokenOut));\\n        transferAll(tokenIn, getBalance(tokenIn));\\n\\n    }\\n\\n    function multihopBatchSwapExactIn(\\n        Swap[][] memory swapSequences,\\n        TokenInterface tokenIn,\\n        TokenInterface tokenOut,\\n        uint totalAmountIn,\\n        uint minTotalAmountOut\\n    )\\n        public payable\\n        returns (uint totalAmountOut)\\n    {\\n\\n        transferFromAll(tokenIn, totalAmountIn);\\n\\n        for (uint i = 0; i < swapSequences.length; i++) {\\n            uint tokenAmountOut;\\n            for (uint k = 0; k < swapSequences[i].length; k++) {\\n                Swap memory swap = swapSequences[i][k];\\n                TokenInterface SwapTokenIn = TokenInterface(swap.tokenIn);\\n                if (k == 1) {\\n                    // Makes sure that on the second swap the output of the first was used\\n                    // so there is not intermediate token leftover\\n                    swap.swapAmount = tokenAmountOut;\\n                }\\n\\n                PoolInterface pool = PoolInterface(swap.pool);\\n                if (SwapTokenIn.allowance(address(this), swap.pool) > 0) {\\n                    SwapTokenIn.approve(swap.pool, 0);\\n                }\\n                SwapTokenIn.approve(swap.pool, swap.swapAmount);\\n                (tokenAmountOut,) = pool.swapExactAmountIn(\\n                                            swap.tokenIn,\\n                                            swap.swapAmount,\\n                                            swap.tokenOut,\\n                                            swap.limitReturnAmount,\\n                                            swap.maxPrice\\n                                        );\\n            }\\n            // This takes the amountOut of the last swap\\n            totalAmountOut = tokenAmountOut.add(totalAmountOut);\\n        }\\n\\n        require(totalAmountOut >= minTotalAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n\\n        transferAll(tokenOut, totalAmountOut);\\n        transferAll(tokenIn, getBalance(tokenIn));\\n\\n    }\\n\\n    function multihopBatchSwapExactOut(\\n        Swap[][] memory swapSequences,\\n        TokenInterface tokenIn,\\n        TokenInterface tokenOut,\\n        uint maxTotalAmountIn\\n    )\\n        public payable\\n        returns (uint totalAmountIn)\\n    {\\n\\n        transferFromAll(tokenIn, maxTotalAmountIn);\\n\\n        for (uint i = 0; i < swapSequences.length; i++) {\\n            uint tokenAmountInFirstSwap;\\n            // Specific code for a simple swap and a multihop (2 swaps in sequence)\\n            if (swapSequences[i].length == 1) {\\n                Swap memory swap = swapSequences[i][0];\\n                TokenInterface SwapTokenIn = TokenInterface(swap.tokenIn);\\n\\n                PoolInterface pool = PoolInterface(swap.pool);\\n                if (SwapTokenIn.allowance(address(this), swap.pool) > 0) {\\n                    SwapTokenIn.approve(swap.pool, 0);\\n                }\\n                SwapTokenIn.approve(swap.pool, swap.limitReturnAmount);\\n\\n                (tokenAmountInFirstSwap,) = pool.swapExactAmountOut(\\n                                        swap.tokenIn,\\n                                        swap.limitReturnAmount,\\n                                        swap.tokenOut,\\n                                        swap.swapAmount,\\n                                        swap.maxPrice\\n                                    );\\n            } else {\\n                // Consider we are swapping A -> B and B -> C. The goal is to buy a given amount\\n                // of token C. But first we need to buy B with A so we can then buy C with B\\n                // To get the exact amount of C we then first need to calculate how much B we'll need:\\n                uint intermediateTokenAmount; // This would be token B as described above\\n                Swap memory secondSwap = swapSequences[i][1];\\n                PoolInterface poolSecondSwap = PoolInterface(secondSwap.pool);\\n                intermediateTokenAmount = poolSecondSwap.calcInGivenOut(\\n                                        poolSecondSwap.getBalance(secondSwap.tokenIn),\\n                                        poolSecondSwap.getDenormalizedWeight(secondSwap.tokenIn),\\n                                        poolSecondSwap.getBalance(secondSwap.tokenOut),\\n                                        poolSecondSwap.getDenormalizedWeight(secondSwap.tokenOut),\\n                                        secondSwap.swapAmount,\\n                                        poolSecondSwap.getSwapFee()\\n                                    );\\n\\n                //// Buy intermediateTokenAmount of token B with A in the first pool\\n                Swap memory firstSwap = swapSequences[i][0];\\n                TokenInterface FirstSwapTokenIn = TokenInterface(firstSwap.tokenIn);\\n                PoolInterface poolFirstSwap = PoolInterface(firstSwap.pool);\\n                if (FirstSwapTokenIn.allowance(address(this), firstSwap.pool) < uint(-1)) {\\n                    FirstSwapTokenIn.approve(firstSwap.pool, uint(-1));\\n                }\\n\\n                (tokenAmountInFirstSwap,) = poolFirstSwap.swapExactAmountOut(\\n                                        firstSwap.tokenIn,\\n                                        firstSwap.limitReturnAmount,\\n                                        firstSwap.tokenOut,\\n                                        intermediateTokenAmount, // This is the amount of token B we need\\n                                        firstSwap.maxPrice\\n                                    );\\n\\n                //// Buy the final amount of token C desired\\n                TokenInterface SecondSwapTokenIn = TokenInterface(secondSwap.tokenIn);\\n                if (SecondSwapTokenIn.allowance(address(this), secondSwap.pool) < uint(-1)) {\\n                    SecondSwapTokenIn.approve(secondSwap.pool, uint(-1));\\n                }\\n\\n                poolSecondSwap.swapExactAmountOut(\\n                                        secondSwap.tokenIn,\\n                                        secondSwap.limitReturnAmount,\\n                                        secondSwap.tokenOut,\\n                                        secondSwap.swapAmount,\\n                                        secondSwap.maxPrice\\n                                    );\\n            }\\n            totalAmountIn = tokenAmountInFirstSwap.add(totalAmountIn);\\n        }\\n\\n        require(totalAmountIn <= maxTotalAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        transferAll(tokenOut, getBalance(tokenOut));\\n        transferAll(tokenIn, getBalance(tokenIn));\\n\\n    }\\n\\n    function smartSwapExactIn(\\n        TokenInterface tokenIn,\\n        TokenInterface tokenOut,\\n        uint totalAmountIn,\\n        uint minTotalAmountOut,\\n        uint nPools\\n    )\\n        public payable\\n        returns (uint totalAmountOut)\\n    {\\n        Swap[] memory swaps;\\n        if (isETH(tokenIn)) {\\n          (swaps,) = viewSplitExactIn(address(weth), address(tokenOut), totalAmountIn, nPools);\\n        } else if (isETH(tokenOut)){\\n          (swaps,) = viewSplitExactIn(address(tokenIn), address(weth), totalAmountIn, nPools);\\n        } else {\\n          (swaps,) = viewSplitExactIn(address(tokenIn), address(tokenOut), totalAmountIn, nPools);\\n        }\\n\\n        totalAmountOut = batchSwapExactIn(swaps, tokenIn, tokenOut, totalAmountIn, minTotalAmountOut);\\n    }\\n\\n    function smartSwapExactOut(\\n        TokenInterface tokenIn,\\n        TokenInterface tokenOut,\\n        uint totalAmountOut,\\n        uint maxTotalAmountIn,\\n        uint nPools\\n    )\\n        public payable\\n        returns (uint totalAmountIn)\\n    {\\n        Swap[] memory swaps;\\n        if (isETH(tokenIn)) {\\n          (swaps,) = viewSplitExactOut(address(weth), address(tokenOut), totalAmountOut, nPools);\\n        } else if (isETH(tokenOut)){\\n          (swaps,) = viewSplitExactOut(address(tokenIn), address(weth), totalAmountOut, nPools);\\n        } else {\\n          (swaps,) = viewSplitExactOut(address(tokenIn), address(tokenOut), totalAmountOut, nPools);\\n        }\\n\\n        totalAmountIn = batchSwapExactOut(swaps, tokenIn, tokenOut, maxTotalAmountIn);\\n    }\\n\\n    function viewSplitExactIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint swapAmount,\\n        uint nPools\\n    )\\n        public view\\n        returns (Swap[] memory swaps, uint totalOutput)\\n    {\\n        address[] memory poolAddresses = registry.getBestPoolsWithLimit(tokenIn, tokenOut, nPools);\\n\\n        Pool[] memory pools = new Pool[](poolAddresses.length);\\n        uint sumEffectiveLiquidity;\\n        for (uint i = 0; i < poolAddresses.length; i++) {\\n            pools[i] = getPoolData(tokenIn, tokenOut, poolAddresses[i]);\\n            sumEffectiveLiquidity = sumEffectiveLiquidity.add(pools[i].effectiveLiquidity);\\n        }\\n\\n        uint[] memory bestInputAmounts = new uint[](pools.length);\\n        uint totalInputAmount;\\n        for (uint i = 0; i < pools.length; i++) {\\n            bestInputAmounts[i] = swapAmount.mul(pools[i].effectiveLiquidity).div(sumEffectiveLiquidity);\\n            totalInputAmount = totalInputAmount.add(bestInputAmounts[i]);\\n        }\\n\\n        if (totalInputAmount < swapAmount) {\\n            bestInputAmounts[0] = bestInputAmounts[0].add(swapAmount.sub(totalInputAmount));\\n        } else {\\n            bestInputAmounts[0] = bestInputAmounts[0].sub(totalInputAmount.sub(swapAmount));\\n        }\\n\\n        swaps = new Swap[](pools.length);\\n\\n        for (uint i = 0; i < pools.length; i++) {\\n            swaps[i] = Swap({\\n                        pool: pools[i].pool,\\n                        tokenIn: tokenIn,\\n                        tokenOut: tokenOut,\\n                        swapAmount: bestInputAmounts[i],\\n                        limitReturnAmount: 0,\\n                        maxPrice: uint(-1)\\n                    });\\n        }\\n\\n        totalOutput = calcTotalOutExactIn(bestInputAmounts, pools);\\n\\n        return (swaps, totalOutput);\\n    }\\n\\n    function viewSplitExactOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint swapAmount,\\n        uint nPools\\n    )\\n        public view\\n        returns (Swap[] memory swaps, uint totalOutput)\\n    {\\n        address[] memory poolAddresses = registry.getBestPoolsWithLimit(tokenIn, tokenOut, nPools);\\n\\n        Pool[] memory pools = new Pool[](poolAddresses.length);\\n        uint sumEffectiveLiquidity;\\n        for (uint i = 0; i < poolAddresses.length; i++) {\\n            pools[i] = getPoolData(tokenIn, tokenOut, poolAddresses[i]);\\n            sumEffectiveLiquidity = sumEffectiveLiquidity.add(pools[i].effectiveLiquidity);\\n        }\\n\\n        uint[] memory bestInputAmounts = new uint[](pools.length);\\n        uint totalInputAmount;\\n        for (uint i = 0; i < pools.length; i++) {\\n            bestInputAmounts[i] = swapAmount.mul(pools[i].effectiveLiquidity).div(sumEffectiveLiquidity);\\n            totalInputAmount = totalInputAmount.add(bestInputAmounts[i]);\\n        }\\n\\n         if (totalInputAmount < swapAmount) {\\n            bestInputAmounts[0] = bestInputAmounts[0].add(swapAmount.sub(totalInputAmount));\\n        } else {\\n            bestInputAmounts[0] = bestInputAmounts[0].sub(totalInputAmount.sub(swapAmount));\\n        }\\n\\n        swaps = new Swap[](pools.length);\\n\\n        for (uint i = 0; i < pools.length; i++) {\\n            swaps[i] = Swap({\\n                        pool: pools[i].pool,\\n                        tokenIn: tokenIn,\\n                        tokenOut: tokenOut,\\n                        swapAmount: bestInputAmounts[i],\\n                        limitReturnAmount: uint(-1),\\n                        maxPrice: uint(-1)\\n                    });\\n        }\\n\\n        totalOutput = calcTotalOutExactOut(bestInputAmounts, pools);\\n\\n        return (swaps, totalOutput);\\n    }\\n\\n    function getPoolData(\\n        address tokenIn,\\n        address tokenOut,\\n        address poolAddress\\n    )\\n        internal view\\n        returns (Pool memory)\\n    {\\n        PoolInterface pool = PoolInterface(poolAddress);\\n        uint tokenBalanceIn = pool.getBalance(tokenIn);\\n        uint tokenBalanceOut = pool.getBalance(tokenOut);\\n        uint tokenWeightIn = pool.getDenormalizedWeight(tokenIn);\\n        uint tokenWeightOut = pool.getDenormalizedWeight(tokenOut);\\n        uint swapFee = pool.getSwapFee();\\n\\n        uint effectiveLiquidity = calcEffectiveLiquidity(\\n                                            tokenWeightIn,\\n                                            tokenBalanceOut,\\n                                            tokenWeightOut\\n                                        );\\n        Pool memory returnPool = Pool({\\n            pool: poolAddress,\\n            tokenBalanceIn: tokenBalanceIn,\\n            tokenWeightIn: tokenWeightIn,\\n            tokenBalanceOut: tokenBalanceOut,\\n            tokenWeightOut: tokenWeightOut,\\n            swapFee: swapFee,\\n            effectiveLiquidity: effectiveLiquidity\\n        });\\n\\n        return returnPool;\\n    }\\n\\n    function calcEffectiveLiquidity(\\n        uint tokenWeightIn,\\n        uint tokenBalanceOut,\\n        uint tokenWeightOut\\n    )\\n        internal pure\\n        returns (uint effectiveLiquidity)\\n    {\\n\\n        // Bo * wi/(wi+wo)\\n        effectiveLiquidity =\\n            tokenWeightIn.mul(BONE).div(\\n                tokenWeightOut.add(tokenWeightIn)\\n            ).mul(tokenBalanceOut).div(BONE);\\n\\n        return effectiveLiquidity;\\n    }\\n\\n    function calcTotalOutExactIn(\\n        uint[] memory bestInputAmounts,\\n        Pool[] memory bestPools\\n    )\\n        internal pure\\n        returns (uint totalOutput)\\n    {\\n        totalOutput = 0;\\n        for (uint i = 0; i < bestInputAmounts.length; i++) {\\n            uint output = PoolInterface(bestPools[i].pool).calcOutGivenIn(\\n                                bestPools[i].tokenBalanceIn,\\n                                bestPools[i].tokenWeightIn,\\n                                bestPools[i].tokenBalanceOut,\\n                                bestPools[i].tokenWeightOut,\\n                                bestInputAmounts[i],\\n                                bestPools[i].swapFee\\n                            );\\n\\n            totalOutput = totalOutput.add(output);\\n        }\\n        return totalOutput;\\n    }\\n\\n    function calcTotalOutExactOut(\\n        uint[] memory bestInputAmounts,\\n        Pool[] memory bestPools\\n    )\\n        internal pure\\n        returns (uint totalOutput)\\n    {\\n        totalOutput = 0;\\n        for (uint i = 0; i < bestInputAmounts.length; i++) {\\n            uint output = PoolInterface(bestPools[i].pool).calcInGivenOut(\\n                                bestPools[i].tokenBalanceIn,\\n                                bestPools[i].tokenWeightIn,\\n                                bestPools[i].tokenBalanceOut,\\n                                bestPools[i].tokenWeightOut,\\n                                bestInputAmounts[i],\\n                                bestPools[i].swapFee\\n                            );\\n\\n            totalOutput = totalOutput.add(output);\\n        }\\n        return totalOutput;\\n    }\\n\\n    function transferFromAll(TokenInterface token, uint amount) internal returns(bool) {\\n        if (isETH(token)) {\\n            weth.deposit.value(msg.value)();\\n        } else {\\n            require(token.transferFrom(msg.sender, address(this), amount), \\\"ERR_TRANSFER_FAILED\\\");\\n        }\\n    }\\n\\n    function getBalance(TokenInterface token) internal view returns (uint) {\\n        if (isETH(token)) {\\n            return weth.balanceOf(address(this));\\n        } else {\\n            return token.balanceOf(address(this));\\n        }\\n    }\\n\\n    function transferAll(TokenInterface token, uint amount) internal returns(bool) {\\n        if (amount == 0) {\\n            return true;\\n        }\\n\\n        if (isETH(token)) {\\n            weth.withdraw(amount);\\n            (bool xfer,) = msg.sender.call.value(amount)(\\\"\\\");\\n            require(xfer, \\\"ERR_ETH_FAILED\\\");\\n        } else {\\n            require(token.transfer(msg.sender, amount), \\\"ERR_TRANSFER_FAILED\\\");\\n        }\\n    }\\n\\n    function isETH(TokenInterface token) internal pure returns(bool) {\\n        return (address(token) == ETH_ADDRESS);\\n    }\\n\\n    function() external payable {}\\n}\",\"keccak256\":\"0x5fb6c0bad2119ae1e1a5ec48711756440e9f4b75d0e712b00504cc658fc5a9b7\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620036ab380380620036ab8339810160408190526200003491620000d0565b6000620000496001600160e01b03620000b916565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600180546001600160a01b0319166001600160a01b039290921691909117905562000125565b3390565b8051620000ca816200010b565b92915050565b600060208284031215620000e357600080fd5b6000620000f18484620000bd565b949350505050565b60006001600160a01b038216620000ca565b6200011681620000f9565b81146200012257600080fd5b50565b61357680620001356000396000f3fe6080604052600436106100d25760003560e01c80638743ad581161007f578063a91ee0dc11610059578063a91ee0dc146101dd578063b40f39ee146101fd578063e2b3974614610210578063f2fde38b14610223576100d2565b80638743ad58146101865780638da5cb5b146101995780638f32d59b146101bb576100d2565b80634b0f93fb116100b05780634b0f93fb1461013e578063715018a61461015e57806386b2ecc414610173576100d2565b806321b0eb85146100d45780632db58134146100fd578063368bb1fc14610110575b005b6100e76100e2366004612df5565b610243565b6040516100f491906133d6565b60405180910390f35b6100e761010b366004612d63565b6102c4565b34801561011c57600080fd5b5061013061012b366004612be6565b6105c3565b6040516100f4929190613317565b34801561014a57600080fd5b50610130610159366004612be6565b610970565b34801561016a57600080fd5b506100d2610c60565b6100e7610181366004612c7c565b610cdb565b6100e7610194366004612d9c565b611668565b3480156101a557600080fd5b506101ae611957565b6040516100f4919061320d565b3480156101c757600080fd5b506101d0611966565b6040516100f49190613337565b3480156101e957600080fd5b506100d26101f8366004612bc8565b61198a565b6100e761020b366004612df5565b6119dd565b6100e761021e366004612cd7565b611a52565b34801561022f57600080fd5b506100d261023e366004612bc8565b611d2e565b6000606061025087611d5e565b156102755760015461026d906001600160a01b0316878786610970565b5090506102ac565b61027e86611d5e565b1561029c5760015461026d9088906001600160a01b03168786610970565b6102a887878786610970565b5090505b6102b98188888888611668565b979650505050505050565b60006102d08483611d84565b5060005b8551811015610570576102e5612898565b8682815181106102f157fe5b602090810291909101810151908101518151604051636eb1769f60e11b815292935090916000906001600160a01b0384169063dd62ed3e906103399030908690600401613229565b60206040518083038186803b15801561035157600080fd5b505afa158015610365573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103899190810190612e3b565b111561041357825160405163095ea7b360e01b81526001600160a01b0384169163095ea7b3916103bf91906000906004016132a2565b602060405180830381600087803b1580156103d957600080fd5b505af11580156103ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104119190810190612dd7565b505b8251608084015160405163095ea7b360e01b81526001600160a01b0385169263095ea7b392610444926004016132bd565b602060405180830381600087803b15801561045e57600080fd5b505af1158015610472573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104969190810190612dd7565b5060208301516080840151604080860151606087015160a088015192517f7c5e9ea40000000000000000000000000000000000000000000000000000000081526000956001600160a01b03881695637c5e9ea4956104fa95929491936004016132cb565b6040805180830381600087803b15801561051357600080fd5b505af1158015610527573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061054b9190810190612e59565b50905061055e818763ffffffff611ebf16565b955050600190930192506102d4915050565b508181111561059a5760405162461bcd60e51b815260040161059190613386565b60405180910390fd5b6105ac836105a785611eeb565b611fae565b506105ba846105a786611eeb565b50949350505050565b60025460405163bfdbfc4360e01b815260609160009183916001600160a01b03169063bfdbfc43906105fd908a908a908990600401613287565b60006040518083038186803b15801561061557600080fd5b505afa158015610629573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106519190810190612c47565b90506060815160405190808252806020026020018201604052801561069057816020015b61067d6128e9565b8152602001906001900390816106755790505b5090506000805b8351811015610709576106be8a8a8684815181106106b157fe5b602002602001015161210f565b8382815181106106ca57fe5b60200260200101819052506106ff8382815181106106e457fe5b602002602001015160c0015183611ebf90919063ffffffff16565b9150600101610697565b5060608251604051908082528060200260200182016040528015610737578160200160208202803883390190505b5090506000805b84518110156107c9576107818461077587848151811061075a57fe5b602002602001015160c001518d6123ef90919063ffffffff16565b9063ffffffff61242916565b83828151811061078d57fe5b6020026020010181815250506107bf8382815181106107a857fe5b602002602001015183611ebf90919063ffffffff16565b915060010161073e565b5088811015610826576108086107e58a8363ffffffff61246b16565b836000815181106107f257fe5b6020026020010151611ebf90919063ffffffff16565b8260008151811061081557fe5b602002602001018181525050610876565b61085c610839828b63ffffffff61246b16565b8360008151811061084657fe5b602002602001015161246b90919063ffffffff16565b8260008151811061086957fe5b6020026020010181815250505b83516040519080825280602002602001820160405280156108b157816020015b61089e612898565b8152602001906001900390816108965790505b50965060005b8451811015610955576040518060c001604052808683815181106108d757fe5b6020026020010151600001516001600160a01b031681526020018d6001600160a01b031681526020018c6001600160a01b0316815260200184838151811061091b57fe5b60200260200101518152602001600019815260200160001981525088828151811061094257fe5b60209081029190910101526001016108b7565b5061096082856124ad565b9550505050505094509492505050565b60025460405163bfdbfc4360e01b815260609160009183916001600160a01b03169063bfdbfc43906109aa908a908a908990600401613287565b60006040518083038186803b1580156109c257600080fd5b505afa1580156109d6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109fe9190810190612c47565b905060608151604051908082528060200260200182016040528015610a3d57816020015b610a2a6128e9565b815260200190600190039081610a225790505b5090506000805b8351811015610a8e57610a5e8a8a8684815181106106b157fe5b838281518110610a6a57fe5b6020026020010181905250610a848382815181106106e457fe5b9150600101610a44565b5060608251604051908082528060200260200182016040528015610abc578160200160208202803883390190505b5090506000805b8451811015610b1057610adf8461077587848151811061075a57fe5b838281518110610aeb57fe5b602002602001018181525050610b068382815181106107a857fe5b9150600101610ac3565b5088811015610b4a57610b2c6107e58a8363ffffffff61246b16565b82600081518110610b3957fe5b602002602001018181525050610b77565b610b5d610839828b63ffffffff61246b16565b82600081518110610b6a57fe5b6020026020010181815250505b8351604051908082528060200260200182016040528015610bb257816020015b610b9f612898565b815260200190600190039081610b975790505b50965060005b8451811015610c55576040518060c00160405280868381518110610bd857fe5b6020026020010151600001516001600160a01b031681526020018d6001600160a01b031681526020018c6001600160a01b03168152602001848381518110610c1c57fe5b6020026020010151815260200160008152602001600019815250888281518110610c4257fe5b6020908102919091010152600101610bb8565b506109608285612603565b610c68611966565b610c845760405162461bcd60e51b8152600401610591906133a6565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000610ce78483611d84565b5060005b8551811015610570576000868281518110610d0257fe5b60200260200101515160011415610f8657610d1b612898565b878381518110610d2757fe5b6020026020010151600081518110610d3b57fe5b602090810291909101810151908101518151604051636eb1769f60e11b815292935090916000906001600160a01b0384169063dd62ed3e90610d839030908690600401613229565b60206040518083038186803b158015610d9b57600080fd5b505afa158015610daf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610dd39190810190612e3b565b1115610e5d57825160405163095ea7b360e01b81526001600160a01b0384169163095ea7b391610e0991906000906004016132a2565b602060405180830381600087803b158015610e2357600080fd5b505af1158015610e37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e5b9190810190612dd7565b505b8251608084015160405163095ea7b360e01b81526001600160a01b0385169263095ea7b392610e8e926004016132bd565b602060405180830381600087803b158015610ea857600080fd5b505af1158015610ebc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ee09190810190612dd7565b50806001600160a01b0316637c5e9ea484602001518560800151866040015187606001518860a001516040518663ffffffff1660e01b8152600401610f299594939291906132cb565b6040805180830381600087803b158015610f4257600080fd5b505af1158015610f56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f7a9190810190612e59565b50935061164d92505050565b6000610f90612898565b888481518110610f9c57fe5b6020026020010151600181518110610fb057fe5b60209081029190910181015180519181015160405163f8b2cb4f60e01b81529193506001600160a01b0383169163f8d6aed491839163f8b2cb4f91610ff79160040161320d565b60206040518083038186803b15801561100f57600080fd5b505afa158015611023573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110479190810190612e3b565b6020850151604051634a46c67360e11b81526001600160a01b0386169163948d8ce691611077919060040161320d565b60206040518083038186803b15801561108f57600080fd5b505afa1580156110a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110c79190810190612e3b565b604080870151905163f8b2cb4f60e01b81526001600160a01b0387169163f8b2cb4f916110f7919060040161320d565b60206040518083038186803b15801561110f57600080fd5b505afa158015611123573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111479190810190612e3b565b6040808801519051634a46c67360e11b81526001600160a01b0388169163948d8ce691611177919060040161320d565b60206040518083038186803b15801561118f57600080fd5b505afa1580156111a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111c79190810190612e3b565b8760600151876001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b15801561120557600080fd5b505afa158015611219573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061123d9190810190612e3b565b6040518763ffffffff1660e01b815260040161125e969594939291906133e4565b60206040518083038186803b15801561127657600080fd5b505afa15801561128a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112ae9190810190612e3b565b92506112b8612898565b8a86815181106112c457fe5b60200260200101516000815181106112d857fe5b602090810291909101810151908101518151604051636eb1769f60e11b81529293509091600019906001600160a01b0384169063dd62ed3e906113219030908690600401613229565b60206040518083038186803b15801561133957600080fd5b505afa15801561134d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113719190810190612e3b565b10156113fc57825160405163095ea7b360e01b81526001600160a01b0384169163095ea7b3916113a89190600019906004016132bd565b602060405180830381600087803b1580156113c257600080fd5b505af11580156113d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113fa9190810190612dd7565b505b806001600160a01b0316637c5e9ea48460200151856080015186604001518a8860a001516040518663ffffffff1660e01b81526004016114409594939291906132cb565b6040805180830381600087803b15801561145957600080fd5b505af115801561146d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114919190810190612e59565b5060208601518651604051636eb1769f60e11b81529299509091600019916001600160a01b0384169163dd62ed3e916114cf91309190600401613229565b60206040518083038186803b1580156114e757600080fd5b505afa1580156114fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061151f9190810190612e3b565b10156115aa57855160405163095ea7b360e01b81526001600160a01b0383169163095ea7b3916115569190600019906004016132bd565b602060405180830381600087803b15801561157057600080fd5b505af1158015611584573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115a89190810190612dd7565b505b846001600160a01b0316637c5e9ea48760200151886080015189604001518a606001518b60a001516040518663ffffffff1660e01b81526004016115f29594939291906132cb565b6040805180830381600087803b15801561160b57600080fd5b505af115801561161f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116439190810190612e59565b5050505050505050505b61165d818463ffffffff611ebf16565b925050600101610ceb565b60006116748584611d84565b5060005b865181101561191457611689612898565b87828151811061169557fe5b602090810291909101810151908101518151604051636eb1769f60e11b815292935090916000906001600160a01b0384169063dd62ed3e906116dd9030908690600401613229565b60206040518083038186803b1580156116f557600080fd5b505afa158015611709573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061172d9190810190612e3b565b11156117b757825160405163095ea7b360e01b81526001600160a01b0384169163095ea7b39161176391906000906004016132a2565b602060405180830381600087803b15801561177d57600080fd5b505af1158015611791573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506117b59190810190612dd7565b505b8251606084015160405163095ea7b360e01b81526001600160a01b0385169263095ea7b3926117e8926004016132bd565b602060405180830381600087803b15801561180257600080fd5b505af1158015611816573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061183a9190810190612dd7565b5060208301516060840151604080860151608087015160a088015192517f8201aa3f0000000000000000000000000000000000000000000000000000000081526000956001600160a01b03881695638201aa3f9561189e95929491936004016132cb565b6040805180830381600087803b1580156118b757600080fd5b505af11580156118cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506118ef9190810190612e59565b509050611902818763ffffffff611ebf16565b95505060019093019250611678915050565b50818110156119355760405162461bcd60e51b815260040161059190613376565b61193f8482611fae565b5061194d856105a787611eeb565b5095945050505050565b6000546001600160a01b031690565b600080546001600160a01b031661197b612752565b6001600160a01b031614905090565b611992611966565b6119ae5760405162461bcd60e51b8152600401610591906133a6565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600060606119ea87611d5e565b15611a0f57600154611a07906001600160a01b03168787866105c3565b509050611a46565b611a1886611d5e565b15611a3657600154611a079088906001600160a01b031687866105c3565b611a42878787866105c3565b5090505b6102b9818888876102c4565b6000611a5e8584611d84565b5060005b8651811015611914576000805b888381518110611a7b57fe5b602002602001015151811015611d1257611a93612898565b898481518110611a9f57fe5b60200260200101518281518110611ab257fe5b602002602001015190506000816020015190508260011415611ad657606082018490525b8151604051636eb1769f60e11b81526000906001600160a01b0384169063dd62ed3e90611b099030908690600401613229565b60206040518083038186803b158015611b2157600080fd5b505afa158015611b35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611b599190810190612e3b565b1115611be357825160405163095ea7b360e01b81526001600160a01b0384169163095ea7b391611b8f91906000906004016132a2565b602060405180830381600087803b158015611ba957600080fd5b505af1158015611bbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611be19190810190612dd7565b505b8251606084015160405163095ea7b360e01b81526001600160a01b0385169263095ea7b392611c14926004016132bd565b602060405180830381600087803b158015611c2e57600080fd5b505af1158015611c42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611c669190810190612dd7565b50806001600160a01b0316638201aa3f84602001518560600151866040015187608001518860a001516040518663ffffffff1660e01b8152600401611caf9594939291906132cb565b6040805180830381600087803b158015611cc857600080fd5b505af1158015611cdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611d009190810190612e59565b5094505060019092019150611a6f9050565b50611d23818463ffffffff611ebf16565b925050600101611a62565b611d36611966565b611d525760405162461bcd60e51b8152600401610591906133a6565b611d5b81612756565b50565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee145b919050565b6000611d8f83611d5e565b15611e0257600160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015611de457600080fd5b505af1158015611df8573d6000803e3d6000fd5b5050505050611eb9565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038416906323b872dd90611e4b90339030908790600401613244565b602060405180830381600087803b158015611e6557600080fd5b505af1158015611e79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611e9d9190810190612dd7565b611eb95760405162461bcd60e51b8152600401610591906133c6565b92915050565b600082820183811015611ee45760405162461bcd60e51b815260040161059190613366565b9392505050565b6000611ef682611d5e565b15611f82576001546040516370a0823160e01b81526001600160a01b03909116906370a0823190611f2b90309060040161321b565b60206040518083038186803b158015611f4357600080fd5b505afa158015611f57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611f7b9190810190612e3b565b9050611d7f565b6040516370a0823160e01b81526001600160a01b038316906370a0823190611f2b90309060040161321b565b600081611fbd57506001611eb9565b611fc683611d5e565b156120c8576001546040517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690632e1a7d4d906120149085906004016133d6565b600060405180830381600087803b15801561202e57600080fd5b505af1158015612042573d6000803e3d6000fd5b505050506000336001600160a01b03168360405161205f90613202565b60006040518083038185875af1925050503d806000811461209c576040519150601f19603f3d011682016040523d82523d6000602084013e6120a1565b606091505b50509050806120c25760405162461bcd60e51b8152600401610591906133b6565b50611eb9565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0384169063a9059cbb90611e4b903390869060040161326c565b6121176128e9565b60405163f8b2cb4f60e01b815282906000906001600160a01b0383169063f8b2cb4f9061214890899060040161320d565b60206040518083038186803b15801561216057600080fd5b505afa158015612174573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506121989190810190612e3b565b90506000826001600160a01b031663f8b2cb4f876040518263ffffffff1660e01b81526004016121c8919061320d565b60206040518083038186803b1580156121e057600080fd5b505afa1580156121f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506122189190810190612e3b565b90506000836001600160a01b031663948d8ce6896040518263ffffffff1660e01b8152600401612248919061320d565b60206040518083038186803b15801561226057600080fd5b505afa158015612274573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506122989190810190612e3b565b90506000846001600160a01b031663948d8ce6896040518263ffffffff1660e01b81526004016122c8919061320d565b60206040518083038186803b1580156122e057600080fd5b505afa1580156122f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506123189190810190612e3b565b90506000856001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b15801561235557600080fd5b505afa158015612369573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061238d9190810190612e3b565b9050600061239c8486856127e4565b90506123a66128e9565b506040805160e0810182526001600160a01b038b16815260208101979097528601939093526060850193909352608084015260a083019190915260c08201529150509392505050565b6000826123fe57506000611eb9565b8282028284828161240b57fe5b0414611ee45760405162461bcd60e51b815260040161059190613396565b6000611ee483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612835565b6000611ee483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061286c565b6000805b83518110156125fc5760008382815181106124c857fe5b6020026020010151600001516001600160a01b031663f8d6aed48584815181106124ee57fe5b60200260200101516020015186858151811061250657fe5b60200260200101516040015187868151811061251e57fe5b60200260200101516060015188878151811061253657fe5b6020026020010151608001518a888151811061254e57fe5b60200260200101518a898151811061256257fe5b602002602001015160a001516040518763ffffffff1660e01b815260040161258f969594939291906133e4565b60206040518083038186803b1580156125a757600080fd5b505afa1580156125bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506125df9190810190612e3b565b90506125f1838263ffffffff611ebf16565b9250506001016124b1565b5092915050565b6000805b83518110156125fc57600083828151811061261e57fe5b6020026020010151600001516001600160a01b031663ba9530a685848151811061264457fe5b60200260200101516020015186858151811061265c57fe5b60200260200101516040015187868151811061267457fe5b60200260200101516060015188878151811061268c57fe5b6020026020010151608001518a88815181106126a457fe5b60200260200101518a89815181106126b857fe5b602002602001015160a001516040518763ffffffff1660e01b81526004016126e5969594939291906133e4565b60206040518083038186803b1580156126fd57600080fd5b505afa158015612711573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506127359190810190612e3b565b9050612747838263ffffffff611ebf16565b925050600101612607565b3390565b6001600160a01b03811661277c5760405162461bcd60e51b815260040161059190613356565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600061282d670de0b6b3a764000061077585612821612809878a63ffffffff611ebf16565b6107758a670de0b6b3a764000063ffffffff6123ef16565b9063ffffffff6123ef16565b949350505050565b600081836128565760405162461bcd60e51b81526004016105919190613345565b50600083858161286257fe5b0495945050505050565b600081848411156128905760405162461bcd60e51b81526004016105919190613345565b505050900390565b6040518060c0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b6040518060e0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8035611eb981613504565b8051611eb981613504565b600082601f83011261295657600080fd5b81516129696129648261345a565b613433565b9150818183526020840193506020810190508385602084028201111561298e57600080fd5b60005b838110156129ba57816129a4888261293a565b8452506020928301929190910190600101612991565b5050505092915050565b600082601f8301126129d557600080fd5b81356129e36129648261345a565b81815260209384019390925082018360005b838110156129ba5781358601612a0b8882612a21565b84525060209283019291909101906001016129f5565b600082601f830112612a3257600080fd5b8135612a406129648261345a565b915081818352602084019350602081019050838560c0840282011115612a6557600080fd5b60005b838110156129ba5781612a7b8882612b1b565b84525060209092019160c09190910190600101612a68565b600082601f830112612aa457600080fd5b8135612ab26129648261345a565b915081818352602084019350602081019050838560c0840282011115612ad757600080fd5b60005b838110156129ba5781612aed8882612b1b565b84525060209092019160c09190910190600101612ada565b8051611eb981613518565b8035611eb981613521565b600060c08284031215612b2d57600080fd5b612b3760c0613433565b90506000612b45848461292f565b8252506020612b568484830161292f565b6020830152506040612b6a8482850161292f565b6040830152506060612b7e84828501612bb2565b6060830152506080612b9284828501612bb2565b60808301525060a0612ba684828501612bb2565b60a08301525092915050565b8035611eb98161352a565b8051611eb98161352a565b600060208284031215612bda57600080fd5b600061282d848461292f565b60008060008060808587031215612bfc57600080fd5b6000612c08878761292f565b9450506020612c198782880161292f565b9350506040612c2a87828801612bb2565b9250506060612c3b87828801612bb2565b91505092959194509250565b600060208284031215612c5957600080fd5b815167ffffffffffffffff811115612c7057600080fd5b61282d84828501612945565b60008060008060808587031215612c9257600080fd5b843567ffffffffffffffff811115612ca957600080fd5b612cb5878288016129c4565b9450506020612cc687828801612b10565b9350506040612c2a87828801612b10565b600080600080600060a08688031215612cef57600080fd5b853567ffffffffffffffff811115612d0657600080fd5b612d12888289016129c4565b9550506020612d2388828901612b10565b9450506040612d3488828901612b10565b9350506060612d4588828901612bb2565b9250506080612d5688828901612bb2565b9150509295509295909350565b60008060008060808587031215612d7957600080fd5b843567ffffffffffffffff811115612d9057600080fd5b612cb587828801612a93565b600080600080600060a08688031215612db457600080fd5b853567ffffffffffffffff811115612dcb57600080fd5b612d1288828901612a93565b600060208284031215612de957600080fd5b600061282d8484612b05565b600080600080600060a08688031215612e0d57600080fd5b6000612e198888612b10565b9550506020612e2a88828901612b10565b9450506040612d3488828901612bb2565b600060208284031215612e4d57600080fd5b600061282d8484612bbd565b60008060408385031215612e6c57600080fd5b6000612e788585612bbd565b9250506020612e8985828601612bbd565b9150509250929050565b6000612e9f8383613183565b505060c00190565b612eb0816134b8565b82525050565b612eb08161348e565b6000612eca82613481565b612ed48185613485565b9350612edf8361347b565b8060005b83811015612f0d578151612ef78882612e93565b9750612f028361347b565b925050600101612ee3565b509495945050505050565b612eb081613499565b612eb0816134c3565b6000612f3582613481565b612f3f8185613485565b9350612f4f8185602086016134ce565b612f58816134fa565b9093019392505050565b6000612f6f602683613485565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f6464726573730000000000000000000000000000000000000000000000000000602082015260400192915050565b6000612fce601b83613485565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b6000613007600d83613485565b7f4552525f4c494d49545f4f555400000000000000000000000000000000000000815260200192915050565b6000613040600c83613485565b7f4552525f4c494d49545f494e0000000000000000000000000000000000000000815260200192915050565b6000613079602183613485565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f81527f7700000000000000000000000000000000000000000000000000000000000000602082015260400192915050565b60006130d8602083613485565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572815260200192915050565b6000613111600e83613485565b7f4552525f4554485f4641494c4544000000000000000000000000000000000000815260200192915050565b6000611eb9600083611d7f565b6000613157601383613485565b7f4552525f5452414e534645525f4641494c454400000000000000000000000000815260200192915050565b805160c08301906131948482612eb6565b5060208201516131a76020850182612eb6565b5060408201516131ba6040850182612eb6565b5060608201516131cd60608501826131f9565b5060808201516131e060808501826131f9565b5060a08201516131f360a08501826131f9565b50505050565b612eb0816134b5565b6000611eb98261313d565b60208101611eb98284612eb6565b60208101611eb98284612ea7565b604081016132378285612ea7565b611ee46020830184612eb6565b606081016132528286612ea7565b61325f6020830185612ea7565b61282d60408301846131f9565b6040810161327a8285612ea7565b611ee460208301846131f9565b606081016132958286612eb6565b61325f6020830185612eb6565b604081016132b08285612eb6565b611ee46020830184612f21565b6040810161327a8285612eb6565b60a081016132d98288612eb6565b6132e660208301876131f9565b6132f36040830186612eb6565b61330060608301856131f9565b61330d60808301846131f9565b9695505050505050565b604080825281016133288185612ebf565b9050611ee460208301846131f9565b60208101611eb98284612f18565b60208082528101611ee48184612f2a565b60208082528101611eb981612f62565b60208082528101611eb981612fc1565b60208082528101611eb981612ffa565b60208082528101611eb981613033565b60208082528101611eb98161306c565b60208082528101611eb9816130cb565b60208082528101611eb981613104565b60208082528101611eb98161314a565b60208101611eb982846131f9565b60c081016133f282896131f9565b6133ff60208301886131f9565b61340c60408301876131f9565b61341960608301866131f9565b61342660808301856131f9565b6102b960a08301846131f9565b60405181810167ffffffffffffffff8111828210171561345257600080fd5b604052919050565b600067ffffffffffffffff82111561347157600080fd5b5060209081020190565b60200190565b5190565b90815260200190565b6000611eb9826134a9565b151590565b6000611eb98261348e565b6001600160a01b031690565b90565b6000611eb98261349e565b6000611eb9826134b5565b60005b838110156134e95781810151838201526020016134d1565b838111156131f35750506000910152565b601f01601f191690565b61350d8161348e565b8114611d5b57600080fd5b61350d81613499565b61350d8161349e565b61350d816134b556fea365627a7a7231582002c1a5b7309f903f56cb448b402113a45497ce61dc48d7c6ccc6b903cc4861846c6578706572696d656e74616cf564736f6c634300050c0040",
  "deployedBytecode": "0x6080604052600436106100d25760003560e01c80638743ad581161007f578063a91ee0dc11610059578063a91ee0dc146101dd578063b40f39ee146101fd578063e2b3974614610210578063f2fde38b14610223576100d2565b80638743ad58146101865780638da5cb5b146101995780638f32d59b146101bb576100d2565b80634b0f93fb116100b05780634b0f93fb1461013e578063715018a61461015e57806386b2ecc414610173576100d2565b806321b0eb85146100d45780632db58134146100fd578063368bb1fc14610110575b005b6100e76100e2366004612df5565b610243565b6040516100f491906133d6565b60405180910390f35b6100e761010b366004612d63565b6102c4565b34801561011c57600080fd5b5061013061012b366004612be6565b6105c3565b6040516100f4929190613317565b34801561014a57600080fd5b50610130610159366004612be6565b610970565b34801561016a57600080fd5b506100d2610c60565b6100e7610181366004612c7c565b610cdb565b6100e7610194366004612d9c565b611668565b3480156101a557600080fd5b506101ae611957565b6040516100f4919061320d565b3480156101c757600080fd5b506101d0611966565b6040516100f49190613337565b3480156101e957600080fd5b506100d26101f8366004612bc8565b61198a565b6100e761020b366004612df5565b6119dd565b6100e761021e366004612cd7565b611a52565b34801561022f57600080fd5b506100d261023e366004612bc8565b611d2e565b6000606061025087611d5e565b156102755760015461026d906001600160a01b0316878786610970565b5090506102ac565b61027e86611d5e565b1561029c5760015461026d9088906001600160a01b03168786610970565b6102a887878786610970565b5090505b6102b98188888888611668565b979650505050505050565b60006102d08483611d84565b5060005b8551811015610570576102e5612898565b8682815181106102f157fe5b602090810291909101810151908101518151604051636eb1769f60e11b815292935090916000906001600160a01b0384169063dd62ed3e906103399030908690600401613229565b60206040518083038186803b15801561035157600080fd5b505afa158015610365573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103899190810190612e3b565b111561041357825160405163095ea7b360e01b81526001600160a01b0384169163095ea7b3916103bf91906000906004016132a2565b602060405180830381600087803b1580156103d957600080fd5b505af11580156103ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104119190810190612dd7565b505b8251608084015160405163095ea7b360e01b81526001600160a01b0385169263095ea7b392610444926004016132bd565b602060405180830381600087803b15801561045e57600080fd5b505af1158015610472573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104969190810190612dd7565b5060208301516080840151604080860151606087015160a088015192517f7c5e9ea40000000000000000000000000000000000000000000000000000000081526000956001600160a01b03881695637c5e9ea4956104fa95929491936004016132cb565b6040805180830381600087803b15801561051357600080fd5b505af1158015610527573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061054b9190810190612e59565b50905061055e818763ffffffff611ebf16565b955050600190930192506102d4915050565b508181111561059a5760405162461bcd60e51b815260040161059190613386565b60405180910390fd5b6105ac836105a785611eeb565b611fae565b506105ba846105a786611eeb565b50949350505050565b60025460405163bfdbfc4360e01b815260609160009183916001600160a01b03169063bfdbfc43906105fd908a908a908990600401613287565b60006040518083038186803b15801561061557600080fd5b505afa158015610629573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106519190810190612c47565b90506060815160405190808252806020026020018201604052801561069057816020015b61067d6128e9565b8152602001906001900390816106755790505b5090506000805b8351811015610709576106be8a8a8684815181106106b157fe5b602002602001015161210f565b8382815181106106ca57fe5b60200260200101819052506106ff8382815181106106e457fe5b602002602001015160c0015183611ebf90919063ffffffff16565b9150600101610697565b5060608251604051908082528060200260200182016040528015610737578160200160208202803883390190505b5090506000805b84518110156107c9576107818461077587848151811061075a57fe5b602002602001015160c001518d6123ef90919063ffffffff16565b9063ffffffff61242916565b83828151811061078d57fe5b6020026020010181815250506107bf8382815181106107a857fe5b602002602001015183611ebf90919063ffffffff16565b915060010161073e565b5088811015610826576108086107e58a8363ffffffff61246b16565b836000815181106107f257fe5b6020026020010151611ebf90919063ffffffff16565b8260008151811061081557fe5b602002602001018181525050610876565b61085c610839828b63ffffffff61246b16565b8360008151811061084657fe5b602002602001015161246b90919063ffffffff16565b8260008151811061086957fe5b6020026020010181815250505b83516040519080825280602002602001820160405280156108b157816020015b61089e612898565b8152602001906001900390816108965790505b50965060005b8451811015610955576040518060c001604052808683815181106108d757fe5b6020026020010151600001516001600160a01b031681526020018d6001600160a01b031681526020018c6001600160a01b0316815260200184838151811061091b57fe5b60200260200101518152602001600019815260200160001981525088828151811061094257fe5b60209081029190910101526001016108b7565b5061096082856124ad565b9550505050505094509492505050565b60025460405163bfdbfc4360e01b815260609160009183916001600160a01b03169063bfdbfc43906109aa908a908a908990600401613287565b60006040518083038186803b1580156109c257600080fd5b505afa1580156109d6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109fe9190810190612c47565b905060608151604051908082528060200260200182016040528015610a3d57816020015b610a2a6128e9565b815260200190600190039081610a225790505b5090506000805b8351811015610a8e57610a5e8a8a8684815181106106b157fe5b838281518110610a6a57fe5b6020026020010181905250610a848382815181106106e457fe5b9150600101610a44565b5060608251604051908082528060200260200182016040528015610abc578160200160208202803883390190505b5090506000805b8451811015610b1057610adf8461077587848151811061075a57fe5b838281518110610aeb57fe5b602002602001018181525050610b068382815181106107a857fe5b9150600101610ac3565b5088811015610b4a57610b2c6107e58a8363ffffffff61246b16565b82600081518110610b3957fe5b602002602001018181525050610b77565b610b5d610839828b63ffffffff61246b16565b82600081518110610b6a57fe5b6020026020010181815250505b8351604051908082528060200260200182016040528015610bb257816020015b610b9f612898565b815260200190600190039081610b975790505b50965060005b8451811015610c55576040518060c00160405280868381518110610bd857fe5b6020026020010151600001516001600160a01b031681526020018d6001600160a01b031681526020018c6001600160a01b03168152602001848381518110610c1c57fe5b6020026020010151815260200160008152602001600019815250888281518110610c4257fe5b6020908102919091010152600101610bb8565b506109608285612603565b610c68611966565b610c845760405162461bcd60e51b8152600401610591906133a6565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000610ce78483611d84565b5060005b8551811015610570576000868281518110610d0257fe5b60200260200101515160011415610f8657610d1b612898565b878381518110610d2757fe5b6020026020010151600081518110610d3b57fe5b602090810291909101810151908101518151604051636eb1769f60e11b815292935090916000906001600160a01b0384169063dd62ed3e90610d839030908690600401613229565b60206040518083038186803b158015610d9b57600080fd5b505afa158015610daf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610dd39190810190612e3b565b1115610e5d57825160405163095ea7b360e01b81526001600160a01b0384169163095ea7b391610e0991906000906004016132a2565b602060405180830381600087803b158015610e2357600080fd5b505af1158015610e37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e5b9190810190612dd7565b505b8251608084015160405163095ea7b360e01b81526001600160a01b0385169263095ea7b392610e8e926004016132bd565b602060405180830381600087803b158015610ea857600080fd5b505af1158015610ebc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ee09190810190612dd7565b50806001600160a01b0316637c5e9ea484602001518560800151866040015187606001518860a001516040518663ffffffff1660e01b8152600401610f299594939291906132cb565b6040805180830381600087803b158015610f4257600080fd5b505af1158015610f56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f7a9190810190612e59565b50935061164d92505050565b6000610f90612898565b888481518110610f9c57fe5b6020026020010151600181518110610fb057fe5b60209081029190910181015180519181015160405163f8b2cb4f60e01b81529193506001600160a01b0383169163f8d6aed491839163f8b2cb4f91610ff79160040161320d565b60206040518083038186803b15801561100f57600080fd5b505afa158015611023573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110479190810190612e3b565b6020850151604051634a46c67360e11b81526001600160a01b0386169163948d8ce691611077919060040161320d565b60206040518083038186803b15801561108f57600080fd5b505afa1580156110a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110c79190810190612e3b565b604080870151905163f8b2cb4f60e01b81526001600160a01b0387169163f8b2cb4f916110f7919060040161320d565b60206040518083038186803b15801561110f57600080fd5b505afa158015611123573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111479190810190612e3b565b6040808801519051634a46c67360e11b81526001600160a01b0388169163948d8ce691611177919060040161320d565b60206040518083038186803b15801561118f57600080fd5b505afa1580156111a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111c79190810190612e3b565b8760600151876001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b15801561120557600080fd5b505afa158015611219573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061123d9190810190612e3b565b6040518763ffffffff1660e01b815260040161125e969594939291906133e4565b60206040518083038186803b15801561127657600080fd5b505afa15801561128a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112ae9190810190612e3b565b92506112b8612898565b8a86815181106112c457fe5b60200260200101516000815181106112d857fe5b602090810291909101810151908101518151604051636eb1769f60e11b81529293509091600019906001600160a01b0384169063dd62ed3e906113219030908690600401613229565b60206040518083038186803b15801561133957600080fd5b505afa15801561134d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113719190810190612e3b565b10156113fc57825160405163095ea7b360e01b81526001600160a01b0384169163095ea7b3916113a89190600019906004016132bd565b602060405180830381600087803b1580156113c257600080fd5b505af11580156113d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113fa9190810190612dd7565b505b806001600160a01b0316637c5e9ea48460200151856080015186604001518a8860a001516040518663ffffffff1660e01b81526004016114409594939291906132cb565b6040805180830381600087803b15801561145957600080fd5b505af115801561146d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114919190810190612e59565b5060208601518651604051636eb1769f60e11b81529299509091600019916001600160a01b0384169163dd62ed3e916114cf91309190600401613229565b60206040518083038186803b1580156114e757600080fd5b505afa1580156114fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061151f9190810190612e3b565b10156115aa57855160405163095ea7b360e01b81526001600160a01b0383169163095ea7b3916115569190600019906004016132bd565b602060405180830381600087803b15801561157057600080fd5b505af1158015611584573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115a89190810190612dd7565b505b846001600160a01b0316637c5e9ea48760200151886080015189604001518a606001518b60a001516040518663ffffffff1660e01b81526004016115f29594939291906132cb565b6040805180830381600087803b15801561160b57600080fd5b505af115801561161f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116439190810190612e59565b5050505050505050505b61165d818463ffffffff611ebf16565b925050600101610ceb565b60006116748584611d84565b5060005b865181101561191457611689612898565b87828151811061169557fe5b602090810291909101810151908101518151604051636eb1769f60e11b815292935090916000906001600160a01b0384169063dd62ed3e906116dd9030908690600401613229565b60206040518083038186803b1580156116f557600080fd5b505afa158015611709573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061172d9190810190612e3b565b11156117b757825160405163095ea7b360e01b81526001600160a01b0384169163095ea7b39161176391906000906004016132a2565b602060405180830381600087803b15801561177d57600080fd5b505af1158015611791573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506117b59190810190612dd7565b505b8251606084015160405163095ea7b360e01b81526001600160a01b0385169263095ea7b3926117e8926004016132bd565b602060405180830381600087803b15801561180257600080fd5b505af1158015611816573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061183a9190810190612dd7565b5060208301516060840151604080860151608087015160a088015192517f8201aa3f0000000000000000000000000000000000000000000000000000000081526000956001600160a01b03881695638201aa3f9561189e95929491936004016132cb565b6040805180830381600087803b1580156118b757600080fd5b505af11580156118cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506118ef9190810190612e59565b509050611902818763ffffffff611ebf16565b95505060019093019250611678915050565b50818110156119355760405162461bcd60e51b815260040161059190613376565b61193f8482611fae565b5061194d856105a787611eeb565b5095945050505050565b6000546001600160a01b031690565b600080546001600160a01b031661197b612752565b6001600160a01b031614905090565b611992611966565b6119ae5760405162461bcd60e51b8152600401610591906133a6565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600060606119ea87611d5e565b15611a0f57600154611a07906001600160a01b03168787866105c3565b509050611a46565b611a1886611d5e565b15611a3657600154611a079088906001600160a01b031687866105c3565b611a42878787866105c3565b5090505b6102b9818888876102c4565b6000611a5e8584611d84565b5060005b8651811015611914576000805b888381518110611a7b57fe5b602002602001015151811015611d1257611a93612898565b898481518110611a9f57fe5b60200260200101518281518110611ab257fe5b602002602001015190506000816020015190508260011415611ad657606082018490525b8151604051636eb1769f60e11b81526000906001600160a01b0384169063dd62ed3e90611b099030908690600401613229565b60206040518083038186803b158015611b2157600080fd5b505afa158015611b35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611b599190810190612e3b565b1115611be357825160405163095ea7b360e01b81526001600160a01b0384169163095ea7b391611b8f91906000906004016132a2565b602060405180830381600087803b158015611ba957600080fd5b505af1158015611bbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611be19190810190612dd7565b505b8251606084015160405163095ea7b360e01b81526001600160a01b0385169263095ea7b392611c14926004016132bd565b602060405180830381600087803b158015611c2e57600080fd5b505af1158015611c42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611c669190810190612dd7565b50806001600160a01b0316638201aa3f84602001518560600151866040015187608001518860a001516040518663ffffffff1660e01b8152600401611caf9594939291906132cb565b6040805180830381600087803b158015611cc857600080fd5b505af1158015611cdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611d009190810190612e59565b5094505060019092019150611a6f9050565b50611d23818463ffffffff611ebf16565b925050600101611a62565b611d36611966565b611d525760405162461bcd60e51b8152600401610591906133a6565b611d5b81612756565b50565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee145b919050565b6000611d8f83611d5e565b15611e0257600160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015611de457600080fd5b505af1158015611df8573d6000803e3d6000fd5b5050505050611eb9565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038416906323b872dd90611e4b90339030908790600401613244565b602060405180830381600087803b158015611e6557600080fd5b505af1158015611e79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611e9d9190810190612dd7565b611eb95760405162461bcd60e51b8152600401610591906133c6565b92915050565b600082820183811015611ee45760405162461bcd60e51b815260040161059190613366565b9392505050565b6000611ef682611d5e565b15611f82576001546040516370a0823160e01b81526001600160a01b03909116906370a0823190611f2b90309060040161321b565b60206040518083038186803b158015611f4357600080fd5b505afa158015611f57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611f7b9190810190612e3b565b9050611d7f565b6040516370a0823160e01b81526001600160a01b038316906370a0823190611f2b90309060040161321b565b600081611fbd57506001611eb9565b611fc683611d5e565b156120c8576001546040517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690632e1a7d4d906120149085906004016133d6565b600060405180830381600087803b15801561202e57600080fd5b505af1158015612042573d6000803e3d6000fd5b505050506000336001600160a01b03168360405161205f90613202565b60006040518083038185875af1925050503d806000811461209c576040519150601f19603f3d011682016040523d82523d6000602084013e6120a1565b606091505b50509050806120c25760405162461bcd60e51b8152600401610591906133b6565b50611eb9565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0384169063a9059cbb90611e4b903390869060040161326c565b6121176128e9565b60405163f8b2cb4f60e01b815282906000906001600160a01b0383169063f8b2cb4f9061214890899060040161320d565b60206040518083038186803b15801561216057600080fd5b505afa158015612174573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506121989190810190612e3b565b90506000826001600160a01b031663f8b2cb4f876040518263ffffffff1660e01b81526004016121c8919061320d565b60206040518083038186803b1580156121e057600080fd5b505afa1580156121f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506122189190810190612e3b565b90506000836001600160a01b031663948d8ce6896040518263ffffffff1660e01b8152600401612248919061320d565b60206040518083038186803b15801561226057600080fd5b505afa158015612274573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506122989190810190612e3b565b90506000846001600160a01b031663948d8ce6896040518263ffffffff1660e01b81526004016122c8919061320d565b60206040518083038186803b1580156122e057600080fd5b505afa1580156122f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506123189190810190612e3b565b90506000856001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b15801561235557600080fd5b505afa158015612369573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061238d9190810190612e3b565b9050600061239c8486856127e4565b90506123a66128e9565b506040805160e0810182526001600160a01b038b16815260208101979097528601939093526060850193909352608084015260a083019190915260c08201529150509392505050565b6000826123fe57506000611eb9565b8282028284828161240b57fe5b0414611ee45760405162461bcd60e51b815260040161059190613396565b6000611ee483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612835565b6000611ee483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061286c565b6000805b83518110156125fc5760008382815181106124c857fe5b6020026020010151600001516001600160a01b031663f8d6aed48584815181106124ee57fe5b60200260200101516020015186858151811061250657fe5b60200260200101516040015187868151811061251e57fe5b60200260200101516060015188878151811061253657fe5b6020026020010151608001518a888151811061254e57fe5b60200260200101518a898151811061256257fe5b602002602001015160a001516040518763ffffffff1660e01b815260040161258f969594939291906133e4565b60206040518083038186803b1580156125a757600080fd5b505afa1580156125bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506125df9190810190612e3b565b90506125f1838263ffffffff611ebf16565b9250506001016124b1565b5092915050565b6000805b83518110156125fc57600083828151811061261e57fe5b6020026020010151600001516001600160a01b031663ba9530a685848151811061264457fe5b60200260200101516020015186858151811061265c57fe5b60200260200101516040015187868151811061267457fe5b60200260200101516060015188878151811061268c57fe5b6020026020010151608001518a88815181106126a457fe5b60200260200101518a89815181106126b857fe5b602002602001015160a001516040518763ffffffff1660e01b81526004016126e5969594939291906133e4565b60206040518083038186803b1580156126fd57600080fd5b505afa158015612711573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506127359190810190612e3b565b9050612747838263ffffffff611ebf16565b925050600101612607565b3390565b6001600160a01b03811661277c5760405162461bcd60e51b815260040161059190613356565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600061282d670de0b6b3a764000061077585612821612809878a63ffffffff611ebf16565b6107758a670de0b6b3a764000063ffffffff6123ef16565b9063ffffffff6123ef16565b949350505050565b600081836128565760405162461bcd60e51b81526004016105919190613345565b50600083858161286257fe5b0495945050505050565b600081848411156128905760405162461bcd60e51b81526004016105919190613345565b505050900390565b6040518060c0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b6040518060e0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8035611eb981613504565b8051611eb981613504565b600082601f83011261295657600080fd5b81516129696129648261345a565b613433565b9150818183526020840193506020810190508385602084028201111561298e57600080fd5b60005b838110156129ba57816129a4888261293a565b8452506020928301929190910190600101612991565b5050505092915050565b600082601f8301126129d557600080fd5b81356129e36129648261345a565b81815260209384019390925082018360005b838110156129ba5781358601612a0b8882612a21565b84525060209283019291909101906001016129f5565b600082601f830112612a3257600080fd5b8135612a406129648261345a565b915081818352602084019350602081019050838560c0840282011115612a6557600080fd5b60005b838110156129ba5781612a7b8882612b1b565b84525060209092019160c09190910190600101612a68565b600082601f830112612aa457600080fd5b8135612ab26129648261345a565b915081818352602084019350602081019050838560c0840282011115612ad757600080fd5b60005b838110156129ba5781612aed8882612b1b565b84525060209092019160c09190910190600101612ada565b8051611eb981613518565b8035611eb981613521565b600060c08284031215612b2d57600080fd5b612b3760c0613433565b90506000612b45848461292f565b8252506020612b568484830161292f565b6020830152506040612b6a8482850161292f565b6040830152506060612b7e84828501612bb2565b6060830152506080612b9284828501612bb2565b60808301525060a0612ba684828501612bb2565b60a08301525092915050565b8035611eb98161352a565b8051611eb98161352a565b600060208284031215612bda57600080fd5b600061282d848461292f565b60008060008060808587031215612bfc57600080fd5b6000612c08878761292f565b9450506020612c198782880161292f565b9350506040612c2a87828801612bb2565b9250506060612c3b87828801612bb2565b91505092959194509250565b600060208284031215612c5957600080fd5b815167ffffffffffffffff811115612c7057600080fd5b61282d84828501612945565b60008060008060808587031215612c9257600080fd5b843567ffffffffffffffff811115612ca957600080fd5b612cb5878288016129c4565b9450506020612cc687828801612b10565b9350506040612c2a87828801612b10565b600080600080600060a08688031215612cef57600080fd5b853567ffffffffffffffff811115612d0657600080fd5b612d12888289016129c4565b9550506020612d2388828901612b10565b9450506040612d3488828901612b10565b9350506060612d4588828901612bb2565b9250506080612d5688828901612bb2565b9150509295509295909350565b60008060008060808587031215612d7957600080fd5b843567ffffffffffffffff811115612d9057600080fd5b612cb587828801612a93565b600080600080600060a08688031215612db457600080fd5b853567ffffffffffffffff811115612dcb57600080fd5b612d1288828901612a93565b600060208284031215612de957600080fd5b600061282d8484612b05565b600080600080600060a08688031215612e0d57600080fd5b6000612e198888612b10565b9550506020612e2a88828901612b10565b9450506040612d3488828901612bb2565b600060208284031215612e4d57600080fd5b600061282d8484612bbd565b60008060408385031215612e6c57600080fd5b6000612e788585612bbd565b9250506020612e8985828601612bbd565b9150509250929050565b6000612e9f8383613183565b505060c00190565b612eb0816134b8565b82525050565b612eb08161348e565b6000612eca82613481565b612ed48185613485565b9350612edf8361347b565b8060005b83811015612f0d578151612ef78882612e93565b9750612f028361347b565b925050600101612ee3565b509495945050505050565b612eb081613499565b612eb0816134c3565b6000612f3582613481565b612f3f8185613485565b9350612f4f8185602086016134ce565b612f58816134fa565b9093019392505050565b6000612f6f602683613485565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f6464726573730000000000000000000000000000000000000000000000000000602082015260400192915050565b6000612fce601b83613485565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b6000613007600d83613485565b7f4552525f4c494d49545f4f555400000000000000000000000000000000000000815260200192915050565b6000613040600c83613485565b7f4552525f4c494d49545f494e0000000000000000000000000000000000000000815260200192915050565b6000613079602183613485565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f81527f7700000000000000000000000000000000000000000000000000000000000000602082015260400192915050565b60006130d8602083613485565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572815260200192915050565b6000613111600e83613485565b7f4552525f4554485f4641494c4544000000000000000000000000000000000000815260200192915050565b6000611eb9600083611d7f565b6000613157601383613485565b7f4552525f5452414e534645525f4641494c454400000000000000000000000000815260200192915050565b805160c08301906131948482612eb6565b5060208201516131a76020850182612eb6565b5060408201516131ba6040850182612eb6565b5060608201516131cd60608501826131f9565b5060808201516131e060808501826131f9565b5060a08201516131f360a08501826131f9565b50505050565b612eb0816134b5565b6000611eb98261313d565b60208101611eb98284612eb6565b60208101611eb98284612ea7565b604081016132378285612ea7565b611ee46020830184612eb6565b606081016132528286612ea7565b61325f6020830185612ea7565b61282d60408301846131f9565b6040810161327a8285612ea7565b611ee460208301846131f9565b606081016132958286612eb6565b61325f6020830185612eb6565b604081016132b08285612eb6565b611ee46020830184612f21565b6040810161327a8285612eb6565b60a081016132d98288612eb6565b6132e660208301876131f9565b6132f36040830186612eb6565b61330060608301856131f9565b61330d60808301846131f9565b9695505050505050565b604080825281016133288185612ebf565b9050611ee460208301846131f9565b60208101611eb98284612f18565b60208082528101611ee48184612f2a565b60208082528101611eb981612f62565b60208082528101611eb981612fc1565b60208082528101611eb981612ffa565b60208082528101611eb981613033565b60208082528101611eb98161306c565b60208082528101611eb9816130cb565b60208082528101611eb981613104565b60208082528101611eb98161314a565b60208101611eb982846131f9565b60c081016133f282896131f9565b6133ff60208301886131f9565b61340c60408301876131f9565b61341960608301866131f9565b61342660808301856131f9565b6102b960a08301846131f9565b60405181810167ffffffffffffffff8111828210171561345257600080fd5b604052919050565b600067ffffffffffffffff82111561347157600080fd5b5060209081020190565b60200190565b5190565b90815260200190565b6000611eb9826134a9565b151590565b6000611eb98261348e565b6001600160a01b031690565b90565b6000611eb98261349e565b6000611eb9826134b5565b60005b838110156134e95781810151838201526020016134d1565b838111156131f35750506000910152565b601f01601f191690565b61350d8161348e565b8114611d5b57600080fd5b61350d81613499565b61350d8161349e565b61350d816134b556fea365627a7a7231582002c1a5b7309f903f56cb448b402113a45497ce61dc48d7c6ccc6b903cc4861846c6578706572696d656e74616cf564736f6c634300050c0040",
  "devdoc": {
    "methods": {
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}